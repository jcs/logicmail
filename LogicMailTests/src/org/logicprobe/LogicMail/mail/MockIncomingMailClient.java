/*
 * This source code was generated by HammockMaker.
 * It should be used with the Hammock libraries for the
 * CLDC 1.1 configuration.
 */
package org.logicprobe.LogicMail.mail;

import com.hammingweight.hammock.*;

public class MockIncomingMailClient extends AMockObject implements org.logicprobe.LogicMail.mail.IncomingMailClient {
    // Overridden methods.
    public static final MockMethod MTHD_APPEND_MESSAGE_$_FOLDERTREEITEM_STRING_MESSAGEFLAGS = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_APPEND_MESSAGE_$_FOLDERTREEITEM_STRING_MESSAGEFLAGS",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class, java.lang.String.class, org.logicprobe.LogicMail.message.MessageFlags.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void appendMessage(org.logicprobe.LogicMail.mail.FolderTreeItem arg0, java.lang.String arg1, org.logicprobe.LogicMail.message.MessageFlags arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_APPEND_MESSAGE_$_FOLDERTREEITEM_STRING_MESSAGEFLAGS, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_CLOSE = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_CLOSE",
        new Class[]{},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void close() throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_CLOSE, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_COPY_MESSAGE_$_MESSAGETOKEN_FOLDERTREEITEM = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_COPY_MESSAGE_$_MESSAGETOKEN_FOLDERTREEITEM",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class, org.logicprobe.LogicMail.mail.FolderTreeItem.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void copyMessage(org.logicprobe.LogicMail.mail.MessageToken arg0, org.logicprobe.LogicMail.mail.FolderTreeItem arg1) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = arg1;
            MethodInvocation mi = new MethodInvocation(MTHD_COPY_MESSAGE_$_MESSAGETOKEN_FOLDERTREEITEM, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_DELETE_MESSAGE_$_MESSAGETOKEN = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_DELETE_MESSAGE_$_MESSAGETOKEN",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void deleteMessage(org.logicprobe.LogicMail.mail.MessageToken arg0) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_DELETE_MESSAGE_$_MESSAGETOKEN, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_EXPUNGE_ACTIVE_FOLDER = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_EXPUNGE_ACTIVE_FOLDER",
        new Class[]{},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void expungeActiveFolder() throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_EXPUNGE_ACTIVE_FOLDER, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_ACCT_CONFIG = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_GET_ACCT_CONFIG",
        new Class[]{},
        new Class[]{},
        org.logicprobe.LogicMail.conf.AccountConfig.class,
        true);
    public org.logicprobe.LogicMail.conf.AccountConfig getAcctConfig()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_GET_ACCT_CONFIG, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.conf.AccountConfig)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_ACTIVE_FOLDER = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_GET_ACTIVE_FOLDER",
        new Class[]{},
        new Class[]{},
        org.logicprobe.LogicMail.mail.FolderTreeItem.class,
        true);
    public org.logicprobe.LogicMail.mail.FolderTreeItem getActiveFolder()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_GET_ACTIVE_FOLDER, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.mail.FolderTreeItem)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_CONNECTION_CONFIG = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_GET_CONNECTION_CONFIG",
        new Class[]{},
        new Class[]{},
        org.logicprobe.LogicMail.conf.ConnectionConfig.class,
        true);
    public org.logicprobe.LogicMail.conf.ConnectionConfig getConnectionConfig()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_GET_CONNECTION_CONFIG, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.conf.ConnectionConfig)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_FOLDER_MESSAGES_$_ARRAY_INT_FOLDERMESSAGECALLBACK_MAILPROGRESSHANDLER = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_GET_FOLDER_MESSAGES_$_ARRAY_INT_FOLDERMESSAGECALLBACK_MAILPROGRESSHANDLER",
        new Class[]{int[].class, org.logicprobe.LogicMail.mail.FolderMessageCallback.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void getFolderMessages(int[] arg0, org.logicprobe.LogicMail.mail.FolderMessageCallback arg1, org.logicprobe.LogicMail.mail.MailProgressHandler arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_GET_FOLDER_MESSAGES_$_ARRAY_INT_FOLDERMESSAGECALLBACK_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_FOLDER_MESSAGES_$_ARRAY_MESSAGETOKEN_BOOLEAN_FOLDERMESSAGECALLBACK_MAILPROGRESSHANDLER = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_GET_FOLDER_MESSAGES_$_ARRAY_MESSAGETOKEN_BOOLEAN_FOLDERMESSAGECALLBACK_MAILPROGRESSHANDLER",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken[].class, Boolean.class, org.logicprobe.LogicMail.mail.FolderMessageCallback.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void getFolderMessages(org.logicprobe.LogicMail.mail.MessageToken[] arg0, boolean arg1, org.logicprobe.LogicMail.mail.FolderMessageCallback arg2, org.logicprobe.LogicMail.mail.MailProgressHandler arg3) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[4];
            args[0] = arg0;
            args[1] = new Boolean(arg1);
            args[2] = arg2;
            args[3] = arg3;
            MethodInvocation mi = new MethodInvocation(MTHD_GET_FOLDER_MESSAGES_$_ARRAY_MESSAGETOKEN_BOOLEAN_FOLDERMESSAGECALLBACK_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_FOLDER_MESSAGES_$_INT_INT_FOLDERMESSAGECALLBACK_MAILPROGRESSHANDLER = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_GET_FOLDER_MESSAGES_$_INT_INT_FOLDERMESSAGECALLBACK_MAILPROGRESSHANDLER",
        new Class[]{Integer.class, Integer.class, org.logicprobe.LogicMail.mail.FolderMessageCallback.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void getFolderMessages(int arg0, int arg1, org.logicprobe.LogicMail.mail.FolderMessageCallback arg2, org.logicprobe.LogicMail.mail.MailProgressHandler arg3) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[4];
            args[0] = new Integer(arg0);
            args[1] = new Integer(arg1);
            args[2] = arg2;
            args[3] = arg3;
            MethodInvocation mi = new MethodInvocation(MTHD_GET_FOLDER_MESSAGES_$_INT_INT_FOLDERMESSAGECALLBACK_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_FOLDER_MESSAGES_$_MESSAGETOKEN_INT_FOLDERMESSAGECALLBACK_MAILPROGRESSHANDLER = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_GET_FOLDER_MESSAGES_$_MESSAGETOKEN_INT_FOLDERMESSAGECALLBACK_MAILPROGRESSHANDLER",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class, Integer.class, org.logicprobe.LogicMail.mail.FolderMessageCallback.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void getFolderMessages(org.logicprobe.LogicMail.mail.MessageToken arg0, int arg1, org.logicprobe.LogicMail.mail.FolderMessageCallback arg2, org.logicprobe.LogicMail.mail.MailProgressHandler arg3) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[4];
            args[0] = arg0;
            args[1] = new Integer(arg1);
            args[2] = arg2;
            args[3] = arg3;
            MethodInvocation mi = new MethodInvocation(MTHD_GET_FOLDER_MESSAGES_$_MESSAGETOKEN_INT_FOLDERMESSAGECALLBACK_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_FOLDER_MESSAGE_INDEX_MAP_$_MAILPROGRESSHANDLER = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_GET_FOLDER_MESSAGE_INDEX_MAP_$_MAILPROGRESSHANDLER",
        new Class[]{org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        net.rim.device.api.util.ToIntHashtable.class,
        true);
    public net.rim.device.api.util.ToIntHashtable getFolderMessageIndexMap(org.logicprobe.LogicMail.mail.MailProgressHandler arg0) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_GET_FOLDER_MESSAGE_INDEX_MAP_$_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (net.rim.device.api.util.ToIntHashtable)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_FOLDER_TREE_$_MAILPROGRESSHANDLER = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_GET_FOLDER_TREE_$_MAILPROGRESSHANDLER",
        new Class[]{org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        org.logicprobe.LogicMail.mail.FolderTreeItem.class,
        true);
    public org.logicprobe.LogicMail.mail.FolderTreeItem getFolderTree(org.logicprobe.LogicMail.mail.MailProgressHandler arg0) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_GET_FOLDER_TREE_$_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.mail.FolderTreeItem)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_INBOX_FOLDER = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_GET_INBOX_FOLDER",
        new Class[]{},
        new Class[]{},
        org.logicprobe.LogicMail.mail.FolderTreeItem.class,
        true);
    public org.logicprobe.LogicMail.mail.FolderTreeItem getInboxFolder()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_GET_INBOX_FOLDER, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.mail.FolderTreeItem)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_MESSAGE_$_MESSAGETOKEN_BOOLEAN_MAILPROGRESSHANDLER = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_GET_MESSAGE_$_MESSAGETOKEN_BOOLEAN_MAILPROGRESSHANDLER",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class, Boolean.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        org.logicprobe.LogicMail.message.Message.class,
        true);
    public org.logicprobe.LogicMail.message.Message getMessage(org.logicprobe.LogicMail.mail.MessageToken arg0, boolean arg1, org.logicprobe.LogicMail.mail.MailProgressHandler arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = new Boolean(arg1);
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_GET_MESSAGE_$_MESSAGETOKEN_BOOLEAN_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.message.Message)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_MESSAGE_PART_$_MESSAGETOKEN_MIMEMESSAGEPART_MAILPROGRESSHANDLER = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_GET_MESSAGE_PART_$_MESSAGETOKEN_MIMEMESSAGEPART_MAILPROGRESSHANDLER",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class, org.logicprobe.LogicMail.message.MimeMessagePart.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        org.logicprobe.LogicMail.message.MimeMessageContent.class,
        true);
    public org.logicprobe.LogicMail.message.MimeMessageContent getMessagePart(org.logicprobe.LogicMail.mail.MessageToken arg0, org.logicprobe.LogicMail.message.MimeMessagePart arg1, org.logicprobe.LogicMail.mail.MailProgressHandler arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_GET_MESSAGE_PART_$_MESSAGETOKEN_MIMEMESSAGEPART_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.message.MimeMessageContent)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_NEW_FOLDER_MESSAGES_$_BOOLEAN_FOLDERMESSAGECALLBACK_MAILPROGRESSHANDLER = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_GET_NEW_FOLDER_MESSAGES_$_BOOLEAN_FOLDERMESSAGECALLBACK_MAILPROGRESSHANDLER",
        new Class[]{Boolean.class, org.logicprobe.LogicMail.mail.FolderMessageCallback.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void getNewFolderMessages(boolean arg0, org.logicprobe.LogicMail.mail.FolderMessageCallback arg1, org.logicprobe.LogicMail.mail.MailProgressHandler arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = new Boolean(arg0);
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_GET_NEW_FOLDER_MESSAGES_$_BOOLEAN_FOLDERMESSAGECALLBACK_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_PASSWORD = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_GET_PASSWORD",
        new Class[]{},
        new Class[]{},
        java.lang.String.class,
        true);
    public java.lang.String getPassword()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_GET_PASSWORD, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (java.lang.String)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_USERNAME = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_GET_USERNAME",
        new Class[]{},
        new Class[]{},
        java.lang.String.class,
        true);
    public java.lang.String getUsername()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_GET_USERNAME, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (java.lang.String)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_HAS_APPEND = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_HAS_APPEND",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasAppend()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_APPEND, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_APPEND, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_HAS_COPY = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_HAS_COPY",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasCopy()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_COPY, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_COPY, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_HAS_EXPUNGE = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_HAS_EXPUNGE",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasExpunge()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_EXPUNGE, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_EXPUNGE, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_HAS_FLAGS = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_HAS_FLAGS",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasFlags()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_FLAGS, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_FLAGS, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_HAS_FOLDERS = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_HAS_FOLDERS",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasFolders()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_FOLDERS, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_FOLDERS, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_HAS_FOLDER_MESSAGE_INDEX_MAP = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_HAS_FOLDER_MESSAGE_INDEX_MAP",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasFolderMessageIndexMap()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_FOLDER_MESSAGE_INDEX_MAP, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_FOLDER_MESSAGE_INDEX_MAP, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_HAS_IDLE = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_HAS_IDLE",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasIdle()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_IDLE, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_IDLE, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_HAS_LOCKED_FOLDERS = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_HAS_LOCKED_FOLDERS",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasLockedFolders()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_LOCKED_FOLDERS, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_LOCKED_FOLDERS, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_HAS_MESSAGE_PARTS = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_HAS_MESSAGE_PARTS",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasMessageParts()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_MESSAGE_PARTS, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_MESSAGE_PARTS, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_HAS_UNDELETE = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_HAS_UNDELETE",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasUndelete()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_UNDELETE, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_UNDELETE, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_IDLE_MODE_BEGIN = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_IDLE_MODE_BEGIN",
        new Class[]{},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void idleModeBegin() throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_IDLE_MODE_BEGIN, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_IDLE_MODE_END = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_IDLE_MODE_END",
        new Class[]{},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void idleModeEnd() throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_IDLE_MODE_END, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_IS_CONNECTED = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_IS_CONNECTED",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean isConnected()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_IS_CONNECTED, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_IS_CONNECTED, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_IS_LOGIN_REQUIRED = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_IS_LOGIN_REQUIRED",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean isLoginRequired()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_IS_LOGIN_REQUIRED, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_IS_LOGIN_REQUIRED, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_MESSAGE_ANSWERED_$_MESSAGETOKEN = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_MESSAGE_ANSWERED_$_MESSAGETOKEN",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void messageAnswered(org.logicprobe.LogicMail.mail.MessageToken arg0) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_MESSAGE_ANSWERED_$_MESSAGETOKEN, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_MESSAGE_FORWARDED_$_MESSAGETOKEN = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_MESSAGE_FORWARDED_$_MESSAGETOKEN",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void messageForwarded(org.logicprobe.LogicMail.mail.MessageToken arg0) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_MESSAGE_FORWARDED_$_MESSAGETOKEN, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_MESSAGE_SEEN_$_MESSAGETOKEN = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_MESSAGE_SEEN_$_MESSAGETOKEN",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void messageSeen(org.logicprobe.LogicMail.mail.MessageToken arg0) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_MESSAGE_SEEN_$_MESSAGETOKEN, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_MESSAGE_UNSEEN_$_MESSAGETOKEN = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_MESSAGE_UNSEEN_$_MESSAGETOKEN",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void messageUnseen(org.logicprobe.LogicMail.mail.MessageToken arg0) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_MESSAGE_UNSEEN_$_MESSAGETOKEN, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_NOOP = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_NOOP",
        new Class[]{},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void noop() throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_NOOP, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_OPEN = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_OPEN",
        new Class[]{},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        Boolean.class,
        true);
    public boolean open() throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_OPEN, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_OPEN, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_REFRESH_FOLDER_STATUS_$_ARRAY_FOLDERTREEITEM_MAILPROGRESSHANDLER = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_REFRESH_FOLDER_STATUS_$_ARRAY_FOLDERTREEITEM_MAILPROGRESSHANDLER",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem[].class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void refreshFolderStatus(org.logicprobe.LogicMail.mail.FolderTreeItem[] arg0, org.logicprobe.LogicMail.mail.MailProgressHandler arg1) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = arg1;
            MethodInvocation mi = new MethodInvocation(MTHD_REFRESH_FOLDER_STATUS_$_ARRAY_FOLDERTREEITEM_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_SET_ACTIVE_FOLDER_$_FOLDERTREEITEM_BOOLEAN = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_SET_ACTIVE_FOLDER_$_FOLDERTREEITEM_BOOLEAN",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class, Boolean.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        Boolean.class,
        true);
    public boolean setActiveFolder(org.logicprobe.LogicMail.mail.FolderTreeItem arg0, boolean arg1) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = new Boolean(arg1);
            MethodInvocation mi = new MethodInvocation(MTHD_SET_ACTIVE_FOLDER_$_FOLDERTREEITEM_BOOLEAN, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_SET_ACTIVE_FOLDER_$_FOLDERTREEITEM_BOOLEAN, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_SET_ACTIVE_FOLDER_$_MESSAGETOKEN_BOOLEAN = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_SET_ACTIVE_FOLDER_$_MESSAGETOKEN_BOOLEAN",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class, Boolean.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        org.logicprobe.LogicMail.mail.FolderTreeItem.class,
        true);
    public org.logicprobe.LogicMail.mail.FolderTreeItem setActiveFolder(org.logicprobe.LogicMail.mail.MessageToken arg0, boolean arg1) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = new Boolean(arg1);
            MethodInvocation mi = new MethodInvocation(MTHD_SET_ACTIVE_FOLDER_$_MESSAGETOKEN_BOOLEAN, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.mail.FolderTreeItem)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_SET_LISTENER_$_INCOMINGMAILCLIENTLISTENER = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_SET_LISTENER_$_INCOMINGMAILCLIENTLISTENER",
        new Class[]{org.logicprobe.LogicMail.mail.IncomingMailClientListener.class},
        new Class[]{},
        null,
        true);
    public void setListener(org.logicprobe.LogicMail.mail.IncomingMailClientListener arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_SET_LISTENER_$_INCOMINGMAILCLIENTLISTENER, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_SET_PASSWORD_$_STRING = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_SET_PASSWORD_$_STRING",
        new Class[]{java.lang.String.class},
        new Class[]{},
        null,
        true);
    public void setPassword(java.lang.String arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_SET_PASSWORD_$_STRING, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_SET_USERNAME_$_STRING = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_SET_USERNAME_$_STRING",
        new Class[]{java.lang.String.class},
        new Class[]{},
        null,
        true);
    public void setUsername(java.lang.String arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_SET_USERNAME_$_STRING, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_UNDELETE_MESSAGE_$_MESSAGETOKEN = new MockMethod(
        MockIncomingMailClient.class, 
        "MTHD_UNDELETE_MESSAGE_$_MESSAGETOKEN",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        true);
    public void undeleteMessage(org.logicprobe.LogicMail.mail.MessageToken arg0) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_UNDELETE_MESSAGE_$_MESSAGETOKEN, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
    }

    // Constructors.
    public MockIncomingMailClient() {
        super();
    }

    public MockIncomingMailClient(IInvocationHandler handler) {
        super();
        setInvocationHandler(handler);
    }

}
