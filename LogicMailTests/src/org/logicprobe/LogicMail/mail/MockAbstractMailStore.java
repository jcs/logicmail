/*
 * This source code was generated by HammockMaker.
 * It should be used with the Hammock libraries for the
 * CLDC 1.1 configuration.
 */
package org.logicprobe.LogicMail.mail;

import com.hammingweight.hammock.*;

public class MockAbstractMailStore extends org.logicprobe.LogicMail.mail.AbstractMailStore implements IMockObject {

    private IInvocationHandler handler;

    // Methods defined in IMockObject.
    public final void setInvocationHandler(IInvocationHandler handler) {
        if (handler == null) {
            throw new NullPointerException();
        }

        this.handler = handler;
    }

    public final IInvocationHandler getInvocationHandler() {
        if (this.handler == null) {
            setInvocationHandler(new Hamspy());
        }
        return this.handler;
    }

    // Overridden methods.
    public static final MockMethod MTHD_ADD_FOLDER_LISTENER_$_FOLDERLISTENER = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_ADD_FOLDER_LISTENER_$_FOLDERLISTENER",
        new Class[]{org.logicprobe.LogicMail.mail.FolderListener.class},
        new Class[]{},
        null,
        false);
    public void addFolderListener(org.logicprobe.LogicMail.mail.FolderListener arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_ADD_FOLDER_LISTENER_$_FOLDERLISTENER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.addFolderListener(arg0);
    }

    public static final MockMethod MTHD_ADD_MAIL_STORE_LISTENER_$_MAILSTORELISTENER = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_ADD_MAIL_STORE_LISTENER_$_MAILSTORELISTENER",
        new Class[]{org.logicprobe.LogicMail.mail.MailStoreListener.class},
        new Class[]{},
        null,
        false);
    public void addMailStoreListener(org.logicprobe.LogicMail.mail.MailStoreListener arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_ADD_MAIL_STORE_LISTENER_$_MAILSTORELISTENER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.addMailStoreListener(arg0);
    }

    public static final MockMethod MTHD_ADD_MESSAGE_LISTENER_$_MESSAGELISTENER = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_ADD_MESSAGE_LISTENER_$_MESSAGELISTENER",
        new Class[]{org.logicprobe.LogicMail.mail.MessageListener.class},
        new Class[]{},
        null,
        false);
    public void addMessageListener(org.logicprobe.LogicMail.mail.MessageListener arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_ADD_MESSAGE_LISTENER_$_MESSAGELISTENER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.addMessageListener(arg0);
    }

    public static final MockMethod MTHD_CREATE_FOLDER_EXPUNGE_REQUEST_$_FOLDERTREEITEM = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_CREATE_FOLDER_EXPUNGE_REQUEST_$_FOLDERTREEITEM",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class},
        new Class[]{},
        org.logicprobe.LogicMail.mail.FolderExpungeRequest.class,
        true);
    public org.logicprobe.LogicMail.mail.FolderExpungeRequest createFolderExpungeRequest(org.logicprobe.LogicMail.mail.FolderTreeItem arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_CREATE_FOLDER_EXPUNGE_REQUEST_$_FOLDERTREEITEM, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.mail.FolderExpungeRequest)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_CREATE_FOLDER_MESSAGES_RANGE_REQUEST_$_FOLDERTREEITEM_MESSAGETOKEN_INT = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_CREATE_FOLDER_MESSAGES_RANGE_REQUEST_$_FOLDERTREEITEM_MESSAGETOKEN_INT",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class, org.logicprobe.LogicMail.mail.MessageToken.class, Integer.class},
        new Class[]{},
        org.logicprobe.LogicMail.mail.FolderMessagesRequest.class,
        true);
    public org.logicprobe.LogicMail.mail.FolderMessagesRequest createFolderMessagesRangeRequest(org.logicprobe.LogicMail.mail.FolderTreeItem arg0, org.logicprobe.LogicMail.mail.MessageToken arg1, int arg2)  {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = new Integer(arg2);
            MethodInvocation mi = new MethodInvocation(MTHD_CREATE_FOLDER_MESSAGES_RANGE_REQUEST_$_FOLDERTREEITEM_MESSAGETOKEN_INT, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.mail.FolderMessagesRequest)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_CREATE_FOLDER_MESSAGES_RECENT_REQUEST_$_FOLDERTREEITEM = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_CREATE_FOLDER_MESSAGES_RECENT_REQUEST_$_FOLDERTREEITEM",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class},
        new Class[]{},
        org.logicprobe.LogicMail.mail.FolderMessagesRequest.class,
        false);
    public org.logicprobe.LogicMail.mail.FolderMessagesRequest createFolderMessagesRecentRequest(org.logicprobe.LogicMail.mail.FolderTreeItem arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_CREATE_FOLDER_MESSAGES_RECENT_REQUEST_$_FOLDERTREEITEM, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (org.logicprobe.LogicMail.mail.FolderMessagesRequest)retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        return super.createFolderMessagesRecentRequest(arg0);
    }

    public static final MockMethod MTHD_CREATE_FOLDER_MESSAGES_RECENT_REQUEST_$_FOLDERTREEITEM_BOOLEAN = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_CREATE_FOLDER_MESSAGES_RECENT_REQUEST_$_FOLDERTREEITEM_BOOLEAN",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class, Boolean.class},
        new Class[]{},
        org.logicprobe.LogicMail.mail.FolderMessagesRequest.class,
        true);
    public org.logicprobe.LogicMail.mail.FolderMessagesRequest createFolderMessagesRecentRequest(org.logicprobe.LogicMail.mail.FolderTreeItem arg0, boolean arg1)  {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = new Boolean(arg1);
            MethodInvocation mi = new MethodInvocation(MTHD_CREATE_FOLDER_MESSAGES_RECENT_REQUEST_$_FOLDERTREEITEM_BOOLEAN, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.mail.FolderMessagesRequest)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_CREATE_FOLDER_MESSAGES_SET_BY_INDEX_REQUEST_$_FOLDERTREEITEM_ARRAY_INT = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_CREATE_FOLDER_MESSAGES_SET_BY_INDEX_REQUEST_$_FOLDERTREEITEM_ARRAY_INT",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class, int[].class},
        new Class[]{},
        org.logicprobe.LogicMail.mail.FolderMessagesRequest.class,
        true);
    public org.logicprobe.LogicMail.mail.FolderMessagesRequest createFolderMessagesSetByIndexRequest(org.logicprobe.LogicMail.mail.FolderTreeItem arg0, int[] arg1)  {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = arg1;
            MethodInvocation mi = new MethodInvocation(MTHD_CREATE_FOLDER_MESSAGES_SET_BY_INDEX_REQUEST_$_FOLDERTREEITEM_ARRAY_INT, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.mail.FolderMessagesRequest)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_CREATE_FOLDER_MESSAGES_SET_REQUEST_$_FOLDERTREEITEM_ARRAY_MESSAGETOKEN = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_CREATE_FOLDER_MESSAGES_SET_REQUEST_$_FOLDERTREEITEM_ARRAY_MESSAGETOKEN",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class, org.logicprobe.LogicMail.mail.MessageToken[].class},
        new Class[]{},
        org.logicprobe.LogicMail.mail.FolderMessagesRequest.class,
        false);
    public org.logicprobe.LogicMail.mail.FolderMessagesRequest createFolderMessagesSetRequest(org.logicprobe.LogicMail.mail.FolderTreeItem arg0, org.logicprobe.LogicMail.mail.MessageToken[] arg1)  {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = arg1;
            MethodInvocation mi = new MethodInvocation(MTHD_CREATE_FOLDER_MESSAGES_SET_REQUEST_$_FOLDERTREEITEM_ARRAY_MESSAGETOKEN, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (org.logicprobe.LogicMail.mail.FolderMessagesRequest)retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        return super.createFolderMessagesSetRequest(arg0, arg1);
    }

    public static final MockMethod MTHD_CREATE_FOLDER_MESSAGES_SET_REQUEST_$_FOLDERTREEITEM_ARRAY_MESSAGETOKEN_BOOLEAN = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_CREATE_FOLDER_MESSAGES_SET_REQUEST_$_FOLDERTREEITEM_ARRAY_MESSAGETOKEN_BOOLEAN",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class, org.logicprobe.LogicMail.mail.MessageToken[].class, Boolean.class},
        new Class[]{},
        org.logicprobe.LogicMail.mail.FolderMessagesRequest.class,
        true);
    public org.logicprobe.LogicMail.mail.FolderMessagesRequest createFolderMessagesSetRequest(org.logicprobe.LogicMail.mail.FolderTreeItem arg0, org.logicprobe.LogicMail.mail.MessageToken[] arg1, boolean arg2)  {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = new Boolean(arg2);
            MethodInvocation mi = new MethodInvocation(MTHD_CREATE_FOLDER_MESSAGES_SET_REQUEST_$_FOLDERTREEITEM_ARRAY_MESSAGETOKEN_BOOLEAN, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.mail.FolderMessagesRequest)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_CREATE_FOLDER_STATUS_REQUEST_$_ARRAY_FOLDERTREEITEM = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_CREATE_FOLDER_STATUS_REQUEST_$_ARRAY_FOLDERTREEITEM",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem[].class},
        new Class[]{},
        org.logicprobe.LogicMail.mail.FolderStatusRequest.class,
        true);
    public org.logicprobe.LogicMail.mail.FolderStatusRequest createFolderStatusRequest(org.logicprobe.LogicMail.mail.FolderTreeItem[] arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_CREATE_FOLDER_STATUS_REQUEST_$_ARRAY_FOLDERTREEITEM, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.mail.FolderStatusRequest)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_CREATE_FOLDER_TREE_REQUEST = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_CREATE_FOLDER_TREE_REQUEST",
        new Class[]{},
        new Class[]{},
        org.logicprobe.LogicMail.mail.FolderTreeRequest.class,
        true);
    public org.logicprobe.LogicMail.mail.FolderTreeRequest createFolderTreeRequest()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_CREATE_FOLDER_TREE_REQUEST, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.mail.FolderTreeRequest)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_CREATE_MESSAGE_APPEND_REQUEST_$_FOLDERTREEITEM_STRING_MESSAGEFLAGS = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_CREATE_MESSAGE_APPEND_REQUEST_$_FOLDERTREEITEM_STRING_MESSAGEFLAGS",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class, java.lang.String.class, org.logicprobe.LogicMail.message.MessageFlags.class},
        new Class[]{},
        org.logicprobe.LogicMail.mail.MessageAppendRequest.class,
        true);
    public org.logicprobe.LogicMail.mail.MessageAppendRequest createMessageAppendRequest(org.logicprobe.LogicMail.mail.FolderTreeItem arg0, java.lang.String arg1, org.logicprobe.LogicMail.message.MessageFlags arg2)  {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_CREATE_MESSAGE_APPEND_REQUEST_$_FOLDERTREEITEM_STRING_MESSAGEFLAGS, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.mail.MessageAppendRequest)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_CREATE_MESSAGE_COPY_REQUEST_$_MESSAGETOKEN_FOLDERTREEITEM = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_CREATE_MESSAGE_COPY_REQUEST_$_MESSAGETOKEN_FOLDERTREEITEM",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class, org.logicprobe.LogicMail.mail.FolderTreeItem.class},
        new Class[]{},
        org.logicprobe.LogicMail.mail.MessageCopyRequest.class,
        true);
    public org.logicprobe.LogicMail.mail.MessageCopyRequest createMessageCopyRequest(org.logicprobe.LogicMail.mail.MessageToken arg0, org.logicprobe.LogicMail.mail.FolderTreeItem arg1)  {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = arg1;
            MethodInvocation mi = new MethodInvocation(MTHD_CREATE_MESSAGE_COPY_REQUEST_$_MESSAGETOKEN_FOLDERTREEITEM, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.mail.MessageCopyRequest)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_CREATE_MESSAGE_FLAG_CHANGE_REQUEST_$_MESSAGETOKEN_MESSAGEFLAGS_BOOLEAN = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_CREATE_MESSAGE_FLAG_CHANGE_REQUEST_$_MESSAGETOKEN_MESSAGEFLAGS_BOOLEAN",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class, org.logicprobe.LogicMail.message.MessageFlags.class, Boolean.class},
        new Class[]{},
        org.logicprobe.LogicMail.mail.MessageFlagChangeRequest.class,
        true);
    public org.logicprobe.LogicMail.mail.MessageFlagChangeRequest createMessageFlagChangeRequest(org.logicprobe.LogicMail.mail.MessageToken arg0, org.logicprobe.LogicMail.message.MessageFlags arg1, boolean arg2)  {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = new Boolean(arg2);
            MethodInvocation mi = new MethodInvocation(MTHD_CREATE_MESSAGE_FLAG_CHANGE_REQUEST_$_MESSAGETOKEN_MESSAGEFLAGS_BOOLEAN, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.mail.MessageFlagChangeRequest)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_CREATE_MESSAGE_PARTS_REQUEST_$_MESSAGETOKEN_ARRAY_MIMEMESSAGEPART = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_CREATE_MESSAGE_PARTS_REQUEST_$_MESSAGETOKEN_ARRAY_MIMEMESSAGEPART",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class, org.logicprobe.LogicMail.message.MimeMessagePart[].class},
        new Class[]{},
        org.logicprobe.LogicMail.mail.MessageRequest.class,
        true);
    public org.logicprobe.LogicMail.mail.MessageRequest createMessagePartsRequest(org.logicprobe.LogicMail.mail.MessageToken arg0, org.logicprobe.LogicMail.message.MimeMessagePart[] arg1)  {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = arg1;
            MethodInvocation mi = new MethodInvocation(MTHD_CREATE_MESSAGE_PARTS_REQUEST_$_MESSAGETOKEN_ARRAY_MIMEMESSAGEPART, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.mail.MessageRequest)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_CREATE_MESSAGE_REQUEST_$_MESSAGETOKEN_BOOLEAN = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_CREATE_MESSAGE_REQUEST_$_MESSAGETOKEN_BOOLEAN",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class, Boolean.class},
        new Class[]{},
        org.logicprobe.LogicMail.mail.MessageRequest.class,
        true);
    public org.logicprobe.LogicMail.mail.MessageRequest createMessageRequest(org.logicprobe.LogicMail.mail.MessageToken arg0, boolean arg1)  {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = new Boolean(arg1);
            MethodInvocation mi = new MethodInvocation(MTHD_CREATE_MESSAGE_REQUEST_$_MESSAGETOKEN_BOOLEAN, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (org.logicprobe.LogicMail.mail.MessageRequest)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_FIRE_FOLDER_EXPUNGED_$_FOLDERTREEITEM_ARRAY_INT_ARRAY_MESSAGETOKEN = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_FIRE_FOLDER_EXPUNGED_$_FOLDERTREEITEM_ARRAY_INT_ARRAY_MESSAGETOKEN",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class, int[].class, org.logicprobe.LogicMail.mail.MessageToken[].class},
        new Class[]{},
        null,
        false);
    public void fireFolderExpunged(org.logicprobe.LogicMail.mail.FolderTreeItem arg0, int[] arg1, org.logicprobe.LogicMail.mail.MessageToken[] arg2)  {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_FIRE_FOLDER_EXPUNGED_$_FOLDERTREEITEM_ARRAY_INT_ARRAY_MESSAGETOKEN, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.fireFolderExpunged(arg0, arg1, arg2);
    }

    public static final MockMethod MTHD_FIRE_FOLDER_EXPUNGED_$_FOLDERTREEITEM_ARRAY_MESSAGETOKEN_ARRAY_MESSAGETOKEN = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_FIRE_FOLDER_EXPUNGED_$_FOLDERTREEITEM_ARRAY_MESSAGETOKEN_ARRAY_MESSAGETOKEN",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class, org.logicprobe.LogicMail.mail.MessageToken[].class, org.logicprobe.LogicMail.mail.MessageToken[].class},
        new Class[]{},
        null,
        false);
    public void fireFolderExpunged(org.logicprobe.LogicMail.mail.FolderTreeItem arg0, org.logicprobe.LogicMail.mail.MessageToken[] arg1, org.logicprobe.LogicMail.mail.MessageToken[] arg2)  {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_FIRE_FOLDER_EXPUNGED_$_FOLDERTREEITEM_ARRAY_MESSAGETOKEN_ARRAY_MESSAGETOKEN, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.fireFolderExpunged(arg0, arg1, arg2);
    }

    public static final MockMethod MTHD_FIRE_FOLDER_MESSAGES_AVAILABLE_$_FOLDERTREEITEM_ARRAY_FOLDERMESSAGE_BOOLEAN = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_FIRE_FOLDER_MESSAGES_AVAILABLE_$_FOLDERTREEITEM_ARRAY_FOLDERMESSAGE_BOOLEAN",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class, org.logicprobe.LogicMail.message.FolderMessage[].class, Boolean.class},
        new Class[]{},
        null,
        false);
    public void fireFolderMessagesAvailable(org.logicprobe.LogicMail.mail.FolderTreeItem arg0, org.logicprobe.LogicMail.message.FolderMessage[] arg1, boolean arg2)  {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = new Boolean(arg2);
            MethodInvocation mi = new MethodInvocation(MTHD_FIRE_FOLDER_MESSAGES_AVAILABLE_$_FOLDERTREEITEM_ARRAY_FOLDERMESSAGE_BOOLEAN, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.fireFolderMessagesAvailable(arg0, arg1, arg2);
    }

    public static final MockMethod MTHD_FIRE_FOLDER_MESSAGE_INDEX_MAP_AVAILABLE_$_FOLDERTREEITEM_TOINTHASHTABLE = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_FIRE_FOLDER_MESSAGE_INDEX_MAP_AVAILABLE_$_FOLDERTREEITEM_TOINTHASHTABLE",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class, net.rim.device.api.util.ToIntHashtable.class},
        new Class[]{},
        null,
        false);
    public void fireFolderMessageIndexMapAvailable(org.logicprobe.LogicMail.mail.FolderTreeItem arg0, net.rim.device.api.util.ToIntHashtable arg1)  {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = arg1;
            MethodInvocation mi = new MethodInvocation(MTHD_FIRE_FOLDER_MESSAGE_INDEX_MAP_AVAILABLE_$_FOLDERTREEITEM_TOINTHASHTABLE, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.fireFolderMessageIndexMapAvailable(arg0, arg1);
    }

    public static final MockMethod MTHD_FIRE_FOLDER_REFRESH_REQUIRED_$_FOLDERTREEITEM = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_FIRE_FOLDER_REFRESH_REQUIRED_$_FOLDERTREEITEM",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class},
        new Class[]{},
        null,
        false);
    public void fireFolderRefreshRequired(org.logicprobe.LogicMail.mail.FolderTreeItem arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_FIRE_FOLDER_REFRESH_REQUIRED_$_FOLDERTREEITEM, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.fireFolderRefreshRequired(arg0);
    }

    public static final MockMethod MTHD_FIRE_FOLDER_STATUS_CHANGED_$_FOLDERTREEITEM = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_FIRE_FOLDER_STATUS_CHANGED_$_FOLDERTREEITEM",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class},
        new Class[]{},
        null,
        false);
    public void fireFolderStatusChanged(org.logicprobe.LogicMail.mail.FolderTreeItem arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_FIRE_FOLDER_STATUS_CHANGED_$_FOLDERTREEITEM, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.fireFolderStatusChanged(arg0);
    }

    public static final MockMethod MTHD_FIRE_FOLDER_TREE_UPDATED_$_FOLDERTREEITEM = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_FIRE_FOLDER_TREE_UPDATED_$_FOLDERTREEITEM",
        new Class[]{org.logicprobe.LogicMail.mail.FolderTreeItem.class},
        new Class[]{},
        null,
        false);
    public void fireFolderTreeUpdated(org.logicprobe.LogicMail.mail.FolderTreeItem arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_FIRE_FOLDER_TREE_UPDATED_$_FOLDERTREEITEM, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.fireFolderTreeUpdated(arg0);
    }

    public static final MockMethod MTHD_FIRE_MESSAGE_AVAILABLE_$_MESSAGETOKEN_BOOLEAN_MIMEMESSAGEPART_ARRAY_MIMEMESSAGECONTENT_STRING = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_FIRE_MESSAGE_AVAILABLE_$_MESSAGETOKEN_BOOLEAN_MIMEMESSAGEPART_ARRAY_MIMEMESSAGECONTENT_STRING",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class, Boolean.class, org.logicprobe.LogicMail.message.MimeMessagePart.class, org.logicprobe.LogicMail.message.MimeMessageContent[].class, java.lang.String.class},
        new Class[]{},
        null,
        false);
    public void fireMessageAvailable(org.logicprobe.LogicMail.mail.MessageToken arg0, boolean arg1, org.logicprobe.LogicMail.message.MimeMessagePart arg2, org.logicprobe.LogicMail.message.MimeMessageContent[] arg3, java.lang.String arg4)  {
        try {
            Object[] args = new Object[5];
            args[0] = arg0;
            args[1] = new Boolean(arg1);
            args[2] = arg2;
            args[3] = arg3;
            args[4] = arg4;
            MethodInvocation mi = new MethodInvocation(MTHD_FIRE_MESSAGE_AVAILABLE_$_MESSAGETOKEN_BOOLEAN_MIMEMESSAGEPART_ARRAY_MIMEMESSAGECONTENT_STRING, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.fireMessageAvailable(arg0, arg1, arg2, arg3, arg4);
    }

    public static final MockMethod MTHD_FIRE_MESSAGE_CONTENT_AVAILABLE_$_MESSAGETOKEN_ARRAY_MIMEMESSAGECONTENT = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_FIRE_MESSAGE_CONTENT_AVAILABLE_$_MESSAGETOKEN_ARRAY_MIMEMESSAGECONTENT",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class, org.logicprobe.LogicMail.message.MimeMessageContent[].class},
        new Class[]{},
        null,
        false);
    public void fireMessageContentAvailable(org.logicprobe.LogicMail.mail.MessageToken arg0, org.logicprobe.LogicMail.message.MimeMessageContent[] arg1)  {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = arg1;
            MethodInvocation mi = new MethodInvocation(MTHD_FIRE_MESSAGE_CONTENT_AVAILABLE_$_MESSAGETOKEN_ARRAY_MIMEMESSAGECONTENT, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.fireMessageContentAvailable(arg0, arg1);
    }

    public static final MockMethod MTHD_FIRE_MESSAGE_FLAGS_CHANGED_$_MESSAGETOKEN_MESSAGEFLAGS = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_FIRE_MESSAGE_FLAGS_CHANGED_$_MESSAGETOKEN_MESSAGEFLAGS",
        new Class[]{org.logicprobe.LogicMail.mail.MessageToken.class, org.logicprobe.LogicMail.message.MessageFlags.class},
        new Class[]{},
        null,
        false);
    public void fireMessageFlagsChanged(org.logicprobe.LogicMail.mail.MessageToken arg0, org.logicprobe.LogicMail.message.MessageFlags arg1)  {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = arg1;
            MethodInvocation mi = new MethodInvocation(MTHD_FIRE_MESSAGE_FLAGS_CHANGED_$_MESSAGETOKEN_MESSAGEFLAGS, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.fireMessageFlagsChanged(arg0, arg1);
    }

    public static final MockMethod MTHD_FIRE_REFRESH_REQUIRED = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_FIRE_REFRESH_REQUIRED",
        new Class[]{},
        new Class[]{},
        null,
        false);
    public void fireRefreshRequired()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_FIRE_REFRESH_REQUIRED, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.fireRefreshRequired();
    }

    public static final MockMethod MTHD_GET_FOLDER_LISTENERS = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_GET_FOLDER_LISTENERS",
        new Class[]{},
        new Class[]{},
        org.logicprobe.LogicMail.mail.FolderListener[].class,
        false);
    public org.logicprobe.LogicMail.mail.FolderListener[] getFolderListeners()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_GET_FOLDER_LISTENERS, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (org.logicprobe.LogicMail.mail.FolderListener[])retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        return super.getFolderListeners();
    }

    public static final MockMethod MTHD_GET_MAIL_STORE_LISTENERS = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_GET_MAIL_STORE_LISTENERS",
        new Class[]{},
        new Class[]{},
        org.logicprobe.LogicMail.mail.MailStoreListener[].class,
        false);
    public org.logicprobe.LogicMail.mail.MailStoreListener[] getMailStoreListeners()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_GET_MAIL_STORE_LISTENERS, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (org.logicprobe.LogicMail.mail.MailStoreListener[])retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        return super.getMailStoreListeners();
    }

    public static final MockMethod MTHD_GET_MESSAGE_LISTENERS = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_GET_MESSAGE_LISTENERS",
        new Class[]{},
        new Class[]{},
        org.logicprobe.LogicMail.mail.MessageListener[].class,
        false);
    public org.logicprobe.LogicMail.mail.MessageListener[] getMessageListeners()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_GET_MESSAGE_LISTENERS, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (org.logicprobe.LogicMail.mail.MessageListener[])retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        return super.getMessageListeners();
    }

    public static final MockMethod MTHD_HAS_APPEND = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_HAS_APPEND",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasAppend()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_APPEND, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_APPEND, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_HAS_COPY = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_HAS_COPY",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasCopy()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_COPY, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_COPY, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_HAS_EXPUNGE = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_HAS_EXPUNGE",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasExpunge()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_EXPUNGE, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_EXPUNGE, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_HAS_FLAGS = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_HAS_FLAGS",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasFlags()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_FLAGS, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_FLAGS, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_HAS_FOLDERS = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_HAS_FOLDERS",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasFolders()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_FOLDERS, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_FOLDERS, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_HAS_MESSAGE_PARTS = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_HAS_MESSAGE_PARTS",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasMessageParts()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_MESSAGE_PARTS, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_MESSAGE_PARTS, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_HAS_UNDELETE = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_HAS_UNDELETE",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean hasUndelete()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_HAS_UNDELETE, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_HAS_UNDELETE, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_IS_LOCAL = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_IS_LOCAL",
        new Class[]{},
        new Class[]{},
        Boolean.class,
        true);
    public boolean isLocal()  {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_IS_LOCAL, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_IS_LOCAL, retVal);
            return ((Boolean)retVal).booleanValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_PROCESS_REQUEST_$_MAILSTOREREQUEST = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_PROCESS_REQUEST_$_MAILSTOREREQUEST",
        new Class[]{org.logicprobe.LogicMail.mail.MailStoreRequest.class},
        new Class[]{},
        null,
        true);
    public void processRequest(org.logicprobe.LogicMail.mail.MailStoreRequest arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_PROCESS_REQUEST_$_MAILSTOREREQUEST, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_REMOVE_FOLDER_LISTENER_$_FOLDERLISTENER = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_REMOVE_FOLDER_LISTENER_$_FOLDERLISTENER",
        new Class[]{org.logicprobe.LogicMail.mail.FolderListener.class},
        new Class[]{},
        null,
        false);
    public void removeFolderListener(org.logicprobe.LogicMail.mail.FolderListener arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_REMOVE_FOLDER_LISTENER_$_FOLDERLISTENER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.removeFolderListener(arg0);
    }

    public static final MockMethod MTHD_REMOVE_MAIL_STORE_LISTENER_$_MAILSTORELISTENER = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_REMOVE_MAIL_STORE_LISTENER_$_MAILSTORELISTENER",
        new Class[]{org.logicprobe.LogicMail.mail.MailStoreListener.class},
        new Class[]{},
        null,
        false);
    public void removeMailStoreListener(org.logicprobe.LogicMail.mail.MailStoreListener arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_REMOVE_MAIL_STORE_LISTENER_$_MAILSTORELISTENER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.removeMailStoreListener(arg0);
    }

    public static final MockMethod MTHD_REMOVE_MESSAGE_LISTENER_$_MESSAGELISTENER = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_REMOVE_MESSAGE_LISTENER_$_MESSAGELISTENER",
        new Class[]{org.logicprobe.LogicMail.mail.MessageListener.class},
        new Class[]{},
        null,
        false);
    public void removeMessageListener(org.logicprobe.LogicMail.mail.MessageListener arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_REMOVE_MESSAGE_LISTENER_$_MESSAGELISTENER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.removeMessageListener(arg0);
    }

    public static final MockMethod MTHD_SHUTDOWN_$_BOOLEAN = new MockMethod(
        MockAbstractMailStore.class, 
        "MTHD_SHUTDOWN_$_BOOLEAN",
        new Class[]{Boolean.class},
        new Class[]{},
        null,
        true);
    public void shutdown(boolean arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = new Boolean(arg0);
            MethodInvocation mi = new MethodInvocation(MTHD_SHUTDOWN_$_BOOLEAN, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
    }

    // Constructors.
    public MockAbstractMailStore()  {
        super();
    }

    public MockAbstractMailStore(IInvocationHandler handler)  {
        super();
        setInvocationHandler(handler);
    }

}
