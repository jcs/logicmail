/*
 * This source code was generated by HammockMaker.
 * It should be used with the Hammock libraries for the
 * CLDC 1.1 configuration.
 */
package org.logicprobe.LogicMail.mail.imap;

import com.hammingweight.hammock.*;

public class MockImapProtocol extends org.logicprobe.LogicMail.mail.imap.ImapProtocol implements IMockObject {

    private IInvocationHandler handler;

    // Methods defined in IMockObject.
    public final void setInvocationHandler(IInvocationHandler handler) {
        if (handler == null) {
            throw new NullPointerException();
        }

        this.handler = handler;
    }

    public final IInvocationHandler getInvocationHandler() {
        if (this.handler == null) {
            setInvocationHandler(new Hamspy());
        }
        return this.handler;
    }

    // Overridden methods.
    public static final MockMethod MTHD_EXECUTE_$_STRING_STRING_MAILPROGRESSHANDLER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_$_STRING_STRING_MAILPROGRESSHANDLER",
        new Class[]{java.lang.String.class, java.lang.String.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        java.lang.String[].class,
        false);
    public java.lang.String[] execute(java.lang.String arg0, java.lang.String arg1, org.logicprobe.LogicMail.mail.MailProgressHandler arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_$_STRING_STRING_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (java.lang.String[])retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.execute(arg0, arg1, arg2);
    }

    public static final MockMethod MTHD_EXECUTE_APPEND_$_STRING_STRING_IMAPPROTOCOL$MESSAGEFLAGS = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_APPEND_$_STRING_STRING_IMAPPROTOCOL$MESSAGEFLAGS",
        new Class[]{java.lang.String.class, java.lang.String.class, org.logicprobe.LogicMail.mail.imap.ImapProtocol.MessageFlags.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        false);
    public void executeAppend(java.lang.String arg0, java.lang.String arg1, org.logicprobe.LogicMail.mail.imap.ImapProtocol.MessageFlags arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_APPEND_$_STRING_STRING_IMAPPROTOCOL$MESSAGEFLAGS, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        super.executeAppend(arg0, arg1, arg2);
    }

    public static final MockMethod MTHD_EXECUTE_BATCH_$_STRING_ARRAY_STRING_MAILPROGRESSHANDLER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_BATCH_$_STRING_ARRAY_STRING_MAILPROGRESSHANDLER",
        new Class[]{java.lang.String.class, java.lang.String[].class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        java.lang.String[].class,
        false);
    public java.lang.String[] executeBatch(java.lang.String arg0, java.lang.String[] arg1, org.logicprobe.LogicMail.mail.MailProgressHandler arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_BATCH_$_STRING_ARRAY_STRING_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (java.lang.String[])retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeBatch(arg0, arg1, arg2);
    }

    public static final MockMethod MTHD_EXECUTE_CAPABILITY = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_CAPABILITY",
        new Class[]{},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        java.util.Hashtable.class,
        false);
    public java.util.Hashtable executeCapability() throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_CAPABILITY, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (java.util.Hashtable)retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeCapability();
    }

    public static final MockMethod MTHD_EXECUTE_CLOSE = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_CLOSE",
        new Class[]{},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        false);
    public void executeClose() throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_CLOSE, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        super.executeClose();
    }

    public static final MockMethod MTHD_EXECUTE_COMPRESS_DEFLATE = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_COMPRESS_DEFLATE",
        new Class[]{},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        Boolean.class,
        false);
    public boolean executeCompressDeflate() throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_COMPRESS_DEFLATE, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                AMockObject.assertReturnNotNull(MTHD_EXECUTE_COMPRESS_DEFLATE, retVal);
                return ((Boolean)retVal).booleanValue();
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeCompressDeflate();
    }

    public static final MockMethod MTHD_EXECUTE_CONTINUE_$_STRING_STRING_ARRAY_BYTE_STRING = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_CONTINUE_$_STRING_STRING_ARRAY_BYTE_STRING",
        new Class[]{java.lang.String.class, java.lang.String.class, byte[].class, java.lang.String.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        byte[][].class,
        false);
    public byte[][] executeContinue(java.lang.String arg0, java.lang.String arg1, byte[] arg2, java.lang.String arg3) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[4];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            args[3] = arg3;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_CONTINUE_$_STRING_STRING_ARRAY_BYTE_STRING, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (byte[][])retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeContinue(arg0, arg1, arg2, arg3);
    }

    public static final MockMethod MTHD_EXECUTE_COPY_$_INT_STRING = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_COPY_$_INT_STRING",
        new Class[]{Integer.class, java.lang.String.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        false);
    public void executeCopy(int arg0, java.lang.String arg1) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[2];
            args[0] = new Integer(arg0);
            args[1] = arg1;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_COPY_$_INT_STRING, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        super.executeCopy(arg0, arg1);
    }

    public static final MockMethod MTHD_EXECUTE_EXPUNGE = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_EXPUNGE",
        new Class[]{},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        false);
    public void executeExpunge() throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_EXPUNGE, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        super.executeExpunge();
    }

    public static final MockMethod MTHD_EXECUTE_FETCH_BODYSTRUCTURE_$_INT = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_FETCH_BODYSTRUCTURE_$_INT",
        new Class[]{Integer.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        org.logicprobe.LogicMail.mail.imap.ImapParser.MessageSection.class,
        false);
    public org.logicprobe.LogicMail.mail.imap.ImapParser.MessageSection executeFetchBodystructure(int arg0) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[1];
            args[0] = new Integer(arg0);
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_FETCH_BODYSTRUCTURE_$_INT, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (org.logicprobe.LogicMail.mail.imap.ImapParser.MessageSection)retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeFetchBodystructure(arg0);
    }

    public static final MockMethod MTHD_EXECUTE_FETCH_BODY_$_INT_STRING_MAILPROGRESSHANDLER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_FETCH_BODY_$_INT_STRING_MAILPROGRESSHANDLER",
        new Class[]{Integer.class, java.lang.String.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        byte[].class,
        false);
    public byte[] executeFetchBody(int arg0, java.lang.String arg1, org.logicprobe.LogicMail.mail.MailProgressHandler arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = new Integer(arg0);
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_FETCH_BODY_$_INT_STRING_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (byte[])retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeFetchBody(arg0, arg1, arg2);
    }

    public static final MockMethod MTHD_EXECUTE_FETCH_ENVELOPE_$_ARRAY_INT_IMAPPROTOCOL$FETCHENVELOPECALLBACK_MAILPROGRESSHANDLER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_FETCH_ENVELOPE_$_ARRAY_INT_IMAPPROTOCOL$FETCHENVELOPECALLBACK_MAILPROGRESSHANDLER",
        new Class[]{int[].class, org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchEnvelopeCallback.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        false);
    public void executeFetchEnvelope(int[] arg0, org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchEnvelopeCallback arg1, org.logicprobe.LogicMail.mail.MailProgressHandler arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_FETCH_ENVELOPE_$_ARRAY_INT_IMAPPROTOCOL$FETCHENVELOPECALLBACK_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        super.executeFetchEnvelope(arg0, arg1, arg2);
    }

    public static final MockMethod MTHD_EXECUTE_FETCH_ENVELOPE_$_INT_INT_IMAPPROTOCOL$FETCHENVELOPECALLBACK_MAILPROGRESSHANDLER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_FETCH_ENVELOPE_$_INT_INT_IMAPPROTOCOL$FETCHENVELOPECALLBACK_MAILPROGRESSHANDLER",
        new Class[]{Integer.class, Integer.class, org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchEnvelopeCallback.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        false);
    public void executeFetchEnvelope(int arg0, int arg1, org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchEnvelopeCallback arg2, org.logicprobe.LogicMail.mail.MailProgressHandler arg3) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[4];
            args[0] = new Integer(arg0);
            args[1] = new Integer(arg1);
            args[2] = arg2;
            args[3] = arg3;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_FETCH_ENVELOPE_$_INT_INT_IMAPPROTOCOL$FETCHENVELOPECALLBACK_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        super.executeFetchEnvelope(arg0, arg1, arg2, arg3);
    }

    public static final MockMethod MTHD_EXECUTE_FETCH_ENVELOPE_UID_$_ARRAY_INT_IMAPPROTOCOL$FETCHENVELOPECALLBACK_MAILPROGRESSHANDLER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_FETCH_ENVELOPE_UID_$_ARRAY_INT_IMAPPROTOCOL$FETCHENVELOPECALLBACK_MAILPROGRESSHANDLER",
        new Class[]{int[].class, org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchEnvelopeCallback.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        false);
    public void executeFetchEnvelopeUid(int[] arg0, org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchEnvelopeCallback arg1, org.logicprobe.LogicMail.mail.MailProgressHandler arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_FETCH_ENVELOPE_UID_$_ARRAY_INT_IMAPPROTOCOL$FETCHENVELOPECALLBACK_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        super.executeFetchEnvelopeUid(arg0, arg1, arg2);
    }

    public static final MockMethod MTHD_EXECUTE_FETCH_ENVELOPE_UID_$_INT_IMAPPROTOCOL$FETCHENVELOPECALLBACK_MAILPROGRESSHANDLER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_FETCH_ENVELOPE_UID_$_INT_IMAPPROTOCOL$FETCHENVELOPECALLBACK_MAILPROGRESSHANDLER",
        new Class[]{Integer.class, org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchEnvelopeCallback.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        false);
    public void executeFetchEnvelopeUid(int arg0, org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchEnvelopeCallback arg1, org.logicprobe.LogicMail.mail.MailProgressHandler arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = new Integer(arg0);
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_FETCH_ENVELOPE_UID_$_INT_IMAPPROTOCOL$FETCHENVELOPECALLBACK_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        super.executeFetchEnvelopeUid(arg0, arg1, arg2);
    }

    public static final MockMethod MTHD_EXECUTE_FETCH_FLAGS_$_INT_INT_MAILPROGRESSHANDLER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_FETCH_FLAGS_$_INT_INT_MAILPROGRESSHANDLER",
        new Class[]{Integer.class, Integer.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchFlagsResponse[].class,
        false);
    public org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchFlagsResponse[] executeFetchFlags(int arg0, int arg1, org.logicprobe.LogicMail.mail.MailProgressHandler arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = new Integer(arg0);
            args[1] = new Integer(arg1);
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_FETCH_FLAGS_$_INT_INT_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchFlagsResponse[])retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeFetchFlags(arg0, arg1, arg2);
    }

    public static final MockMethod MTHD_EXECUTE_FETCH_FLAGS_UID_$_ARRAY_INT_MAILPROGRESSHANDLER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_FETCH_FLAGS_UID_$_ARRAY_INT_MAILPROGRESSHANDLER",
        new Class[]{int[].class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchFlagsResponse[].class,
        false);
    public org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchFlagsResponse[] executeFetchFlagsUid(int[] arg0, org.logicprobe.LogicMail.mail.MailProgressHandler arg1) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = arg1;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_FETCH_FLAGS_UID_$_ARRAY_INT_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchFlagsResponse[])retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeFetchFlagsUid(arg0, arg1);
    }

    public static final MockMethod MTHD_EXECUTE_FETCH_FLAGS_UID_$_INT_MAILPROGRESSHANDLER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_FETCH_FLAGS_UID_$_INT_MAILPROGRESSHANDLER",
        new Class[]{Integer.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchFlagsResponse[].class,
        false);
    public org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchFlagsResponse[] executeFetchFlagsUid(int arg0, org.logicprobe.LogicMail.mail.MailProgressHandler arg1) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[2];
            args[0] = new Integer(arg0);
            args[1] = arg1;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_FETCH_FLAGS_UID_$_INT_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (org.logicprobe.LogicMail.mail.imap.ImapProtocol.FetchFlagsResponse[])retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeFetchFlagsUid(arg0, arg1);
    }

    public static final MockMethod MTHD_EXECUTE_IDLE_$_IMAPPROTOCOL$IDLELISTENER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_IDLE_$_IMAPPROTOCOL$IDLELISTENER",
        new Class[]{org.logicprobe.LogicMail.mail.imap.ImapProtocol.IdleListener.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        false);
    public void executeIdle(org.logicprobe.LogicMail.mail.imap.ImapProtocol.IdleListener arg0) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_IDLE_$_IMAPPROTOCOL$IDLELISTENER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        super.executeIdle(arg0);
    }

    public static final MockMethod MTHD_EXECUTE_IDLE_DONE = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_IDLE_DONE",
        new Class[]{},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        false);
    public void executeIdleDone() throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_IDLE_DONE, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        super.executeIdleDone();
    }

    public static final MockMethod MTHD_EXECUTE_LIST_$_STRING_STRING_MAILPROGRESSHANDLER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_LIST_$_STRING_STRING_MAILPROGRESSHANDLER",
        new Class[]{java.lang.String.class, java.lang.String.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        java.util.Vector.class,
        false);
    public java.util.Vector executeList(java.lang.String arg0, java.lang.String arg1, org.logicprobe.LogicMail.mail.MailProgressHandler arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_LIST_$_STRING_STRING_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (java.util.Vector)retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeList(arg0, arg1, arg2);
    }

    public static final MockMethod MTHD_EXECUTE_LOGIN_$_STRING_STRING = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_LOGIN_$_STRING_STRING",
        new Class[]{java.lang.String.class, java.lang.String.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        Boolean.class,
        false);
    public boolean executeLogin(java.lang.String arg0, java.lang.String arg1) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = arg1;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_LOGIN_$_STRING_STRING, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                AMockObject.assertReturnNotNull(MTHD_EXECUTE_LOGIN_$_STRING_STRING, retVal);
                return ((Boolean)retVal).booleanValue();
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeLogin(arg0, arg1);
    }

    public static final MockMethod MTHD_EXECUTE_LOGOUT = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_LOGOUT",
        new Class[]{},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        false);
    public void executeLogout() throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_LOGOUT, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        super.executeLogout();
    }

    public static final MockMethod MTHD_EXECUTE_LSUB_$_STRING_STRING_MAILPROGRESSHANDLER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_LSUB_$_STRING_STRING_MAILPROGRESSHANDLER",
        new Class[]{java.lang.String.class, java.lang.String.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        java.util.Vector.class,
        false);
    public java.util.Vector executeLsub(java.lang.String arg0, java.lang.String arg1, org.logicprobe.LogicMail.mail.MailProgressHandler arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_LSUB_$_STRING_STRING_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (java.util.Vector)retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeLsub(arg0, arg1, arg2);
    }

    public static final MockMethod MTHD_EXECUTE_NAMESPACE = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_NAMESPACE",
        new Class[]{},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        org.logicprobe.LogicMail.mail.imap.ImapProtocol.NamespaceResponse.class,
        false);
    public org.logicprobe.LogicMail.mail.imap.ImapProtocol.NamespaceResponse executeNamespace() throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_NAMESPACE, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (org.logicprobe.LogicMail.mail.imap.ImapProtocol.NamespaceResponse)retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeNamespace();
    }

    public static final MockMethod MTHD_EXECUTE_NOOP = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_NOOP",
        new Class[]{},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        false);
    public void executeNoop() throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_NOOP, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        super.executeNoop();
    }

    public static final MockMethod MTHD_EXECUTE_NO_REPLY_$_STRING_STRING = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_NO_REPLY_$_STRING_STRING",
        new Class[]{java.lang.String.class, java.lang.String.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        java.lang.String.class,
        false);
    public java.lang.String executeNoReply(java.lang.String arg0, java.lang.String arg1) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = arg1;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_NO_REPLY_$_STRING_STRING, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (java.lang.String)retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeNoReply(arg0, arg1);
    }

    public static final MockMethod MTHD_EXECUTE_RESPONSE_$_STRING_STRING_IMAPPROTOCOL$EXECUTECALLBACK_MAILPROGRESSHANDLER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_RESPONSE_$_STRING_STRING_IMAPPROTOCOL$EXECUTECALLBACK_MAILPROGRESSHANDLER",
        new Class[]{java.lang.String.class, java.lang.String.class, org.logicprobe.LogicMail.mail.imap.ImapProtocol.ExecuteCallback.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        false);
    public void executeResponse(java.lang.String arg0, java.lang.String arg1, org.logicprobe.LogicMail.mail.imap.ImapProtocol.ExecuteCallback arg2, org.logicprobe.LogicMail.mail.MailProgressHandler arg3) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[4];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            args[3] = arg3;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_RESPONSE_$_STRING_STRING_IMAPPROTOCOL$EXECUTECALLBACK_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        super.executeResponse(arg0, arg1, arg2, arg3);
    }

    public static final MockMethod MTHD_EXECUTE_RESPONSE_$_STRING_STRING_MAILPROGRESSHANDLER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_RESPONSE_$_STRING_STRING_MAILPROGRESSHANDLER",
        new Class[]{java.lang.String.class, java.lang.String.class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        byte[][].class,
        false);
    public byte[][] executeResponse(java.lang.String arg0, java.lang.String arg1, org.logicprobe.LogicMail.mail.MailProgressHandler arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_RESPONSE_$_STRING_STRING_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (byte[][])retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeResponse(arg0, arg1, arg2);
    }

    public static final MockMethod MTHD_EXECUTE_SELECT_$_STRING = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_SELECT_$_STRING",
        new Class[]{java.lang.String.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        org.logicprobe.LogicMail.mail.imap.ImapProtocol.SelectResponse.class,
        false);
    public org.logicprobe.LogicMail.mail.imap.ImapProtocol.SelectResponse executeSelect(java.lang.String arg0) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_SELECT_$_STRING, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (org.logicprobe.LogicMail.mail.imap.ImapProtocol.SelectResponse)retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeSelect(arg0);
    }

    public static final MockMethod MTHD_EXECUTE_START_TLS = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_START_TLS",
        new Class[]{},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        false);
    public void executeStartTLS() throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_START_TLS, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        super.executeStartTLS();
    }

    public static final MockMethod MTHD_EXECUTE_STATUS_$_ARRAY_STRING_MAILPROGRESSHANDLER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_STATUS_$_ARRAY_STRING_MAILPROGRESSHANDLER",
        new Class[]{java.lang.String[].class, org.logicprobe.LogicMail.mail.MailProgressHandler.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        org.logicprobe.LogicMail.mail.imap.ImapProtocol.StatusResponse[].class,
        false);
    public org.logicprobe.LogicMail.mail.imap.ImapProtocol.StatusResponse[] executeStatus(java.lang.String[] arg0, org.logicprobe.LogicMail.mail.MailProgressHandler arg1) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[2];
            args[0] = arg0;
            args[1] = arg1;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_STATUS_$_ARRAY_STRING_MAILPROGRESSHANDLER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (org.logicprobe.LogicMail.mail.imap.ImapProtocol.StatusResponse[])retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeStatus(arg0, arg1);
    }

    public static final MockMethod MTHD_EXECUTE_STORE_$_INT_BOOLEAN_ARRAY_STRING = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_STORE_$_INT_BOOLEAN_ARRAY_STRING",
        new Class[]{Integer.class, Boolean.class, java.lang.String[].class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        null,
        false);
    public void executeStore(int arg0, boolean arg1, java.lang.String[] arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = new Integer(arg0);
            args[1] = new Boolean(arg1);
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_STORE_$_INT_BOOLEAN_ARRAY_STRING, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        super.executeStore(arg0, arg1, arg2);
    }

    public static final MockMethod MTHD_EXECUTE_UNTAGGED_$_STRING_STRING_STRING = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_EXECUTE_UNTAGGED_$_STRING_STRING_STRING",
        new Class[]{java.lang.String.class, java.lang.String.class, java.lang.String.class},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        java.lang.String[].class,
        false);
    public java.lang.String[] executeUntagged(java.lang.String arg0, java.lang.String arg1, java.lang.String arg2) throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[3];
            args[0] = arg0;
            args[1] = arg1;
            args[2] = arg2;
            MethodInvocation mi = new MethodInvocation(MTHD_EXECUTE_UNTAGGED_$_STRING_STRING_STRING, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (java.lang.String[])retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.executeUntagged(arg0, arg1, arg2);
    }

    public static final MockMethod MTHD_GET_FETCH_INCREMENT_$_INT_LONG = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_GET_FETCH_INCREMENT_$_INT_LONG",
        new Class[]{Integer.class, Long.class},
        new Class[]{},
        Integer.class,
        false);
    public int getFetchIncrement(int arg0, long arg1)  {
        try {
            Object[] args = new Object[2];
            args[0] = new Integer(arg0);
            args[1] = new Long(arg1);
            MethodInvocation mi = new MethodInvocation(MTHD_GET_FETCH_INCREMENT_$_INT_LONG, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                AMockObject.assertReturnNotNull(MTHD_GET_FETCH_INCREMENT_$_INT_LONG, retVal);
                return ((Integer)retVal).intValue();
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        return super.getFetchIncrement(arg0, arg1);
    }

    public static final MockMethod MTHD_RECEIVE = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_RECEIVE",
        new Class[]{},
        new Class[]{java.io.IOException.class, org.logicprobe.LogicMail.mail.MailException.class},
        java.lang.String.class,
        false);
    public java.lang.String receive() throws java.io.IOException, org.logicprobe.LogicMail.mail.MailException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_RECEIVE, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                Object retVal = mi.getReturnValue();
                return (java.lang.String)retVal;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            if (t instanceof org.logicprobe.LogicMail.mail.MailException) { throw (org.logicprobe.LogicMail.mail.MailException)t; }
            throw new HammockException(t);
        }
        return super.receive();
    }

    public static final MockMethod MTHD_SET_CONNECTION_$_CONNECTION = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_SET_CONNECTION_$_CONNECTION",
        new Class[]{org.logicprobe.LogicMail.util.Connection.class},
        new Class[]{},
        null,
        false);
    public void setConnection(org.logicprobe.LogicMail.util.Connection arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_SET_CONNECTION_$_CONNECTION, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.setConnection(arg0);
    }

    public static final MockMethod MTHD_SET_UNTAGGED_RESPONSE_LISTENER_$_IMAPPROTOCOL$UNTAGGEDRESPONSELISTENER = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_SET_UNTAGGED_RESPONSE_LISTENER_$_IMAPPROTOCOL$UNTAGGEDRESPONSELISTENER",
        new Class[]{org.logicprobe.LogicMail.mail.imap.ImapProtocol.UntaggedResponseListener.class},
        new Class[]{},
        null,
        false);
    public void setUntaggedResponseListener(org.logicprobe.LogicMail.mail.imap.ImapProtocol.UntaggedResponseListener arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_SET_UNTAGGED_RESPONSE_LISTENER_$_IMAPPROTOCOL$UNTAGGEDRESPONSELISTENER, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.setUntaggedResponseListener(arg0);
    }

    public static final MockMethod MTHD_SET_WATCHDOG_$_WATCHDOG = new MockMethod(
        MockImapProtocol.class, 
        "MTHD_SET_WATCHDOG_$_WATCHDOG",
        new Class[]{org.logicprobe.LogicMail.util.Watchdog.class},
        new Class[]{},
        null,
        false);
    public void setWatchdog(org.logicprobe.LogicMail.util.Watchdog arg0)  {
        try {
            Object[] args = new Object[1];
            args[0] = arg0;
            MethodInvocation mi = new MethodInvocation(MTHD_SET_WATCHDOG_$_WATCHDOG, this, args);
            getInvocationHandler().invoke(mi);
            if (mi.isEvaluated()) {
                mi.getReturnValue();
                return;
            }
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            throw new HammockException(t);
        }
        super.setWatchdog(arg0);
    }

    // Constructors.
    public MockImapProtocol()  {
        super();
    }

    public MockImapProtocol(IInvocationHandler handler)  {
        super();
        setInvocationHandler(handler);
    }

}
