//
// This mock object source code was generated by HammockMaker.
//
package com.hammingweight.hammock.mocks.microedition.io;

import com.hammingweight.hammock.*;

public class MockSocketConnection extends AMockObject implements javax.microedition.io.SocketConnection {
    // Overridden methods.
    public static final MockMethod MTHD_CLOSE = new MockMethod(
        MockSocketConnection.class, 
        "MTHD_CLOSE",
        new Class[]{},
        new Class[]{java.io.IOException.class},
        null,
        true);
    public void close() throws java.io.IOException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_CLOSE, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_ADDRESS = new MockMethod(
        MockSocketConnection.class, 
        "MTHD_GET_ADDRESS",
        new Class[]{},
        new Class[]{java.io.IOException.class},
        java.lang.String.class,
        true);
    public java.lang.String getAddress() throws java.io.IOException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_GET_ADDRESS, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (java.lang.String)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_LOCAL_ADDRESS = new MockMethod(
        MockSocketConnection.class, 
        "MTHD_GET_LOCAL_ADDRESS",
        new Class[]{},
        new Class[]{java.io.IOException.class},
        java.lang.String.class,
        true);
    public java.lang.String getLocalAddress() throws java.io.IOException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_GET_LOCAL_ADDRESS, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (java.lang.String)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_LOCAL_PORT = new MockMethod(
        MockSocketConnection.class, 
        "MTHD_GET_LOCAL_PORT",
        new Class[]{},
        new Class[]{java.io.IOException.class},
        Integer.class,
        true);
    public int getLocalPort() throws java.io.IOException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_GET_LOCAL_PORT, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_GET_LOCAL_PORT, retVal);
            return ((Integer)retVal).intValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_PORT = new MockMethod(
        MockSocketConnection.class, 
        "MTHD_GET_PORT",
        new Class[]{},
        new Class[]{java.io.IOException.class},
        Integer.class,
        true);
    public int getPort() throws java.io.IOException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_GET_PORT, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_GET_PORT, retVal);
            return ((Integer)retVal).intValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_GET_SOCKET_OPTION_$_BYTE = new MockMethod(
        MockSocketConnection.class, 
        "MTHD_GET_SOCKET_OPTION_$_BYTE",
        new Class[]{Byte.class},
        new Class[]{java.io.IOException.class},
        Integer.class,
        true);
    public int getSocketOption(byte arg0) throws java.io.IOException {
        try {
            Object[] args = new Object[1];
            args[0] = new Byte(arg0);
            MethodInvocation mi = new MethodInvocation(MTHD_GET_SOCKET_OPTION_$_BYTE, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            AMockObject.assertReturnNotNull(MTHD_GET_SOCKET_OPTION_$_BYTE, retVal);
            return ((Integer)retVal).intValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_OPEN_DATA_INPUT_STREAM = new MockMethod(
        MockSocketConnection.class, 
        "MTHD_OPEN_DATA_INPUT_STREAM",
        new Class[]{},
        new Class[]{java.io.IOException.class},
        java.io.DataInputStream.class,
        true);
    public java.io.DataInputStream openDataInputStream() throws java.io.IOException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_OPEN_DATA_INPUT_STREAM, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (java.io.DataInputStream)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_OPEN_DATA_OUTPUT_STREAM = new MockMethod(
        MockSocketConnection.class, 
        "MTHD_OPEN_DATA_OUTPUT_STREAM",
        new Class[]{},
        new Class[]{java.io.IOException.class},
        java.io.DataOutputStream.class,
        true);
    public java.io.DataOutputStream openDataOutputStream() throws java.io.IOException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_OPEN_DATA_OUTPUT_STREAM, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (java.io.DataOutputStream)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_OPEN_INPUT_STREAM = new MockMethod(
        MockSocketConnection.class, 
        "MTHD_OPEN_INPUT_STREAM",
        new Class[]{},
        new Class[]{java.io.IOException.class},
        java.io.InputStream.class,
        true);
    public java.io.InputStream openInputStream() throws java.io.IOException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_OPEN_INPUT_STREAM, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (java.io.InputStream)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_OPEN_OUTPUT_STREAM = new MockMethod(
        MockSocketConnection.class, 
        "MTHD_OPEN_OUTPUT_STREAM",
        new Class[]{},
        new Class[]{java.io.IOException.class},
        java.io.OutputStream.class,
        true);
    public java.io.OutputStream openOutputStream() throws java.io.IOException {
        try {
            Object[] args = new Object[0];
            MethodInvocation mi = new MethodInvocation(MTHD_OPEN_OUTPUT_STREAM, this, args);
            getInvocationHandler().invoke(mi);
            Object retVal = mi.getReturnValue();
            return (java.io.OutputStream)retVal;
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            throw new HammockException(t);
        }
    }

    public static final MockMethod MTHD_SET_SOCKET_OPTION_$_BYTE_INT = new MockMethod(
        MockSocketConnection.class, 
        "MTHD_SET_SOCKET_OPTION_$_BYTE_INT",
        new Class[]{Byte.class, Integer.class},
        new Class[]{java.io.IOException.class},
        null,
        true);
    public void setSocketOption(byte arg0, int arg1) throws java.io.IOException {
        try {
            Object[] args = new Object[2];
            args[0] = new Byte(arg0);
            args[1] = new Integer(arg1);
            MethodInvocation mi = new MethodInvocation(MTHD_SET_SOCKET_OPTION_$_BYTE_INT, this, args);
            getInvocationHandler().invoke(mi);
            mi.getReturnValue();
        } catch (Throwable t) {
            if (t instanceof java.lang.Error) { throw (java.lang.Error)t; }
            if (t instanceof java.lang.RuntimeException) { throw (java.lang.RuntimeException)t; }
            if (t instanceof java.io.IOException) { throw (java.io.IOException)t; }
            throw new HammockException(t);
        }
    }

    // Constructors.
    public MockSocketConnection() {
        super();
    }

    public MockSocketConnection(IInvocationHandler handler) {
        super();
        setInvocationHandler(handler);
    }

}
